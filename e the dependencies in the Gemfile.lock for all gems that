BUNDLE-INSTALL(1)                                            BUNDLE-INSTALL(1)

NNAAMMEE
       bbuunnddllee--iinnssttaallll - Install the dependencies specified in your Gemfile

SSYYNNOOPPSSIISS
       bbuunnddllee   iinnssttaallll   [--binstubs[=DIRECTORY]]   [--clean]  [--deployment]
       [--force] [--frozen] [--full-index] [--gemfile=GEMFILE] [--jobs=NUMBER]
       [--local]    [--no-cache]    [--no-prune]   [--path   PATH]   [--quiet]
       [--retry=NUMBER] [--shebang] [--standalone[=GROUP[ GROUP...]]]  [--sys‐
       tem]   [--trust-policy=POLICY]   [--with=GROUP[   GROUP...]]   [--with‐
       out=GROUP[ GROUP...]]

DDEESSCCRRIIPPTTIIOONN
       Install the gems specified in your Gemfile(5). If  this  is  the  first
       time  you  run  bundle  install  (and  a  GGeemmffiillee..lloocckk does not exist),
       Bundler will fetch all remote sources, resolve dependencies and install
       all needed gems.

       If a GGeemmffiillee..lloocckk does exist, and you have not updated your Gemfile(5),
       Bundler will fetch all remote sources, but use the dependencies  speci‐
       fied in the GGeemmffiillee..lloocckk instead of resolving dependencies.

       If  a  GGeemmffiillee..lloocckk  does  exist, and you have updated your Gemfile(5),
       Bundler will use the dependencies in the GGeemmffiillee..lloocckk for all gems that
       you  did  not update, but will re-resolve the dependencies of gems that
       you did update. You can find more information about this update process
       below under _C_O_N_S_E_R_V_A_T_I_V_E _U_P_D_A_T_I_N_G.

OOPPTTIIOONNSS
       To  apply  any  of ----bbiinnssttuubbss, ----ddeeppllooyymmeenntt, ----ppaatthh, or ----wwiitthhoouutt every
       time bbuunnddllee iinnssttaallll is run, use bbuunnddllee ccoonnffiigg (see bundle-config(1)).

       ----bbiinnssttuubbss[[==<<ddiirreeccttoorryy>>]]
              Creates a directory (defaults to ~~//bbiinn) and place  any  executa‐
              bles from the gem there. These executables run in Bundler´s con‐
              text. If used, you might add this  directory  to  your  environ‐
              ment´s  PPAATTHH variable. For instance, if the rraaiillss gem comes with
              a rraaiillss executable, this flag will create a bbiinn//rraaiillss executable
              that  ensures  that  all  referred dependencies will be resolved
              using the bundled gems.

       ----cclleeaann
              On finishing the installation Bundler is  going  to  remove  any
              gems  not  present  in the current Gemfile(5). Don´t worry, gems
              currently in use will not be removed.

       ----ddeeppllooyymmeenntt
              In _d_e_p_l_o_y_m_e_n_t _m_o_d_e, Bundler will ´roll-out´ the bundle for  pro‐
              duction  or  CI  use. Please check carefully if you want to have
              this option enabled in your development environment.

       ----ffoorrccee
              Force download every gem, even  if  the  required  versions  are
              already available locally.

       ----ffrroozzeenn
              Do  not allow the Gemfile.lock to be updated after this install.
              Exits non-zero if there are going to  be  changes  to  the  Gem‐
              file.lock.

       ----ffuullll--iinnddeexx
              Bundler will not call Rubygems´ API endpoint (default) but down‐
              load and cache a (currently big) index file of all gems. Perfor‐
              mance  can  be  improved for large bundles that seldom change by
              enabling this option.

       ----ggeemmffiillee==<<ggeemmffiillee>>
              The location of the Gemfile(5) which Bundler  should  use.  This
              defaults  to  a  Gemfile(5) in the current working directory. In
              general, Bundler will assume that the location of the Gemfile(5)
              is also the project´s root and will try to find GGeemmffiillee..lloocckk and
              vveennddoorr//ccaacchhee relative to this location.

       ----jjoobbss==[[<<nnuummbbeerr>>]], --jj[[<<nnuummbbeerr>>]]
              The maximum number of parallel download and  install  jobs.  The
              default is 11.

       ----llooccaall
              Do not attempt to connect to rruubbyyggeemmss..oorrgg. Instead, Bundler will
              use the gems already present  in  Rubygems´  cache  or  in  vveenn‐‐
              ddoorr//ccaacchhee.  Note  that  if  a  appropriate platform-specific gem
              exists on rruubbyyggeemmss..oorrgg it will not be found.

       ----nnoo--ccaacchhee
              Do not update the cache in vveennddoorr//ccaacchhee with the  newly  bundled
              gems.  This  does not remove any gems in the cache but keeps the
              newly bundled gems from being cached during the install.

       ----nnoo--pprruunnee
              Don´t remove stale gems from the  cache  when  the  installation
              finishes.

       ----ppaatthh==<<ppaatthh>>
              The  location to install the specified gems to. This defaults to
              Rubygems´ setting. Bundler shares this location  with  Rubygems,
              ggeemm  iinnssttaallll  ...... will have gem installed there, too. Therefore,
              gems installed without a ----ppaatthh ......  setting  will  show  up  by
              calling ggeemm lliisstt. Accordingly, gems installed to other locations
              will not get listed.

       ----qquuiieett
              Do not  print  progress  information  to  the  standard  output.
              Instead, Bundler will exit using a status code ($$??).

       ----rreettrryy==[[<<nnuummbbeerr>>]]
              Retry failed network or git requests for _n_u_m_b_e_r times.

       ----sshheebbaanngg==<<rruubbyy--eexxeeccuuttaabbllee>>
              Uses the specified ruby executable (usually rruubbyy) to execute the
              scripts created with ----bbiinnssttuubbss. In addition, if you use  ----bbiinn‐‐
              ssttuubbss  together  with  ----sshheebbaanngg jjrruubbyy these executables will be
              changed to execute jjrruubbyy instead.

       ----ssttaannddaalloonnee[[==<<lliisstt>>]]
              Makes a bundle that can work without depending  on  Rubygems  or
              Bundler  at runtime. A space separated list of groups to install
              has to be specified. Bundler creates a  directory  named  bbuunnddllee
              and  installs  the  bundle  there.  It  also  generates  a  bbuunn‐‐
              ddllee//bbuunnddlleerr//sseettuupp..rrbb file to replace Bundler´s own setup in  the
              manner  required.  Using this option implicitly sets ppaatthh, which
              is a [remembered option][REMEMBERED OPTIONS].

       ----ssyysstteemm
              Installs the gems  specified  in  the  bundle  to  the  system´s
              Rubygems  location. This overrides any previous configuration of
              ----ppaatthh.

       ----ttrruusstt--ppoolliiccyy==[[<<ppoolliiccyy>>]]
              Apply the Rubygems security policy _p_o_l_i_c_y, where policy  is  one
              of  HHiigghhSSeeccuurriittyy, MMeeddiiuummSSeeccuurriittyy, LLoowwSSeeccuurriittyy, AAllmmoossttNNooSSeeccuurriittyy,
              or NNooSSeeccuurriittyy. For more details, please see the Rubygems signing
              documentation linked below in _S_E_E _A_L_S_O.

       ----wwiitthh==<<lliisstt>>
              A space-separated list of groups referencing gems to install. If
              an optional group is given it is installed. If a group is  given
              that  is in the remembered list of groups given to --without, it
              is removed from that list.

       ----wwiitthhoouutt==<<lliisstt>>
              A space-separated list of groups referencing gems to skip during
              installation. If a group is given that is in the remembered list
              of groups given to --with, it is removed from that list.

DDEEPPLLOOYYMMEENNTT MMOODDEE
       Bundler´s defaults are optimized for development. To switch to defaults
       optimized  for deployment and for CI, use the ----ddeeppllooyymmeenntt flag. Do not
       activate deployment mode on development machines, as it will  cause  an
       error when the Gemfile(5) is modified.

       1.  A GGeemmffiillee..lloocckk is required.

           To ensure that the same versions of the gems you developed with and
           tested with  are  also  used  in  deployments,  a  GGeemmffiillee..lloocckk  is
           required.

           This  is  mainly  to  ensure  that  you remember to check your GGeemm‐‐
           ffiillee..lloocckk into version control.

       2.  The GGeemmffiillee..lloocckk must be up to date

           In development, you can modify your Gemfile(5)  and  re-run  bbuunnddllee
           iinnssttaallll to _c_o_n_s_e_r_v_a_t_i_v_e_l_y _u_p_d_a_t_e your GGeemmffiillee..lloocckk snapshot.

           In  deployment, your GGeemmffiillee..lloocckk should be up-to-date with changes
           made in your Gemfile(5).

       3.  Gems are installed to vveennddoorr//bbuunnddllee not your default  system  loca‐
           tion

           In  development,  it´s  convenient  to  share the gems used in your
           application with other applications and other scripts that  run  on
           the system.

           In  deployment, isolation is a more important default. In addition,
           the user deploying the  application  may  not  have  permission  to
           install  gems to the system, or the web server may not have permis‐
           sion to read them.

           As a result, bbuunnddllee iinnssttaallll ----ddeeppllooyymmeenntt installs gems to the  vveenn‐‐
           ddoorr//bbuunnddllee  directory  in  the  application. This may be overridden
           using the ----ppaatthh option.

SSUUDDOO UUSSAAGGEE
       By default, Bundler installs gems to the same location as ggeemm iinnssttaallll.

       In some cases, that location may not be writable by your Unix user.  In
       that case, Bundler will stage everything in a temporary directory, then
       ask you for your ssuuddoo password in order to copy  the  gems  into  their
       system location.

       From  your  perspective,  this  is  identical  to  installing  the gems
       directly into the system.

       You should never use ssuuddoo bbuunnddllee iinnssttaallll. This is because several other
       steps in bbuunnddllee iinnssttaallll must be performed as the current user:

       ·   Updating your GGeemmffiillee..lloocckk

       ·   Updating your vveennddoorr//ccaacchhee, if necessary

       ·   Checking out private git repositories using your user´s SSH keys

       Of  these  three,  the  first  two  could theoretically be performed by
       cchhoowwnning the resulting files to $$SSUUDDOO__UUSSEERR.  The  third,  however,  can
       only  be  performed  by  invoking  the ggiitt command as the current user.
       Therefore, git gems are downloaded and installed into ~~//..bbuunnddllee  rather
       than $GEM_HOME or $BUNDLE_PATH.

       As  a  result,  you  should run bbuunnddllee iinnssttaallll as the current user, and
       Bundler will ask for your password if it is needed to put the gems into
       their final location.

IINNSSTTAALLLLIINNGG GGRROOUUPPSS
       By  default, bbuunnddllee iinnssttaallll will install all gems in all groups in your
       Gemfile(5), except those declared for a different platform.

       However, you can explicitly tell Bundler  to  skip  installing  certain
       groups  with  the ----wwiitthhoouutt option. This option takes a space-separated
       list of groups.

       While the ----wwiitthhoouutt option will skip _i_n_s_t_a_l_l_i_n_g the gems in the  speci‐
       fied  groups, it will still _d_o_w_n_l_o_a_d those gems and use them to resolve
       the dependencies of every gem in your Gemfile(5).

       This is so that installing a different set of groups on another machine
       (such  as  a  production  server) will not change the gems and versions
       that you have already developed and tested against.

       BBuunnddlleerr ooffffeerrss aa rroocckk--ssoolliidd gguuaarraanntteeee tthhaatt tthhee tthhiirrdd--ppaarrttyy ccooddee yyoouu aarree
       rruunnnniinngg iinn ddeevveellooppmmeenntt aanndd tteessttiinngg iiss aallssoo tthhee tthhiirrdd--ppaarrttyy ccooddee yyoouu aarree
       rruunnnniinngg iinn pprroodduuccttiioonn.. YYoouu ccaann cchhoooossee ttoo eexxcclluuddee ssoommee ooff tthhaatt  ccooddee  iinn
       ddiiffffeerreenntt  eennvviirroonnmmeennttss,,  bbuutt  yyoouu  wwiillll nneevveerr bbee ccaauugghhtt ffllaatt--ffooootteedd bbyy
       ddiiffffeerreenntt vveerrssiioonnss ooff tthhiirrdd--ppaarrttyy ccooddee bbeeiinngg uusseedd iinn ddiiffffeerreenntt eennvviirroonn‐‐
       mmeennttss..

       For a simple illustration, consider the following Gemfile(5):

           source ´https://rubygems.org´

           gem ´sinatra´

           group :production do
             gem ´rack-perftools-profiler´
           end

       In  this  case,  ssiinnaattrraa depends on any version of Rack (>>== 11..00), while
       rraacckk--ppeerrffttoooollss--pprrooffiilleerr depends on 1.x (~~>> 11..00).

       When you run bbuunnddllee iinnssttaallll ----wwiitthhoouutt  pprroodduuccttiioonn  in  development,  we
       look  at the dependencies of rraacckk--ppeerrffttoooollss--pprrooffiilleerr as well. That way,
       you do not spend all your time developing against Rack 2.0,  using  new
       APIs  unavailable  in Rack 1.x, only to have Bundler switch to Rack 1.2
       when the pprroodduuccttiioonn group _i_s used.

       This should not cause any problems  in  practice,  because  we  do  not
       attempt  to  iinnssttaallll the gems in the excluded groups, and only evaluate
       as part of the dependency resolution process.

       This also means that you cannot include different versions of the  same
       gem  in  different  groups,  because doing so would result in different
       sets of dependencies used in development and production. Because of the
       vagaries  of  the  dependency  resolution process, this usually affects
       more than the gems you list in your Gemfile(5), and can  (surprisingly)
       radically change the gems you are using.

TTHHEE GGEEMMFFIILLEE..LLOOCCKK
       When  you  run  bbuunnddllee iinnssttaallll, Bundler will persist the full names and
       versions of all gems that you used (including dependencies of the  gems
       specified in the Gemfile(5)) into a file called GGeemmffiillee..lloocckk.

       Bundler uses this file in all subsequent calls to bbuunnddllee iinnssttaallll, which
       guarantees that you always use the same exact code, even as your appli‐
       cation moves across machines.

       Because  of the way dependency resolution works, even a seemingly small
       change (for instance, an update to a point-release of a dependency of a
       gem  in  your  Gemfile(5)) can result in radically different gems being
       needed to satisfy all dependencies.

       As a result, you SSHHOOUULLDD check your GGeemmffiillee..lloocckk into  version  control.
       If you do not, every machine that checks out your repository (including
       your production server) will resolve all dependencies again, which will
       result  in  different versions of third-party code being used if aannyy of
       the gems in the Gemfile(5) or  any  of  their  dependencies  have  been
       updated.

CCOONNSSEERRVVAATTIIVVEE UUPPDDAATTIINNGG
       When  you  make a change to the Gemfile(5) and then run bbuunnddllee iinnssttaallll,
       Bundler will update only the gems that you modified.

       In other words, if a gem that you ddiidd  nnoott  mmooddiiffyy  worked  before  you
       called  bbuunnddllee iinnssttaallll, it will continue to use the exact same versions
       of all dependencies as it used before the update.

       Let´s take a look at an example. Here´s your original Gemfile(5):

           source ´https://rubygems.org´

           gem ´actionpack´, ´2.3.8´
           gem ´activemerchant´

       In this case, both aaccttiioonnppaacckk and aaccttiivveemmeerrcchhaanntt depend  on  aaccttiivveessuupp‐‐
       ppoorrtt.  The  aaccttiioonnppaacckk  gem  depends on aaccttiivveessuuppppoorrtt 22..33..88 and rraacckk ~~>>
       11..11..00, while the aaccttiivveemmeerrcchhaanntt gem depends on aaccttiivveessuuppppoorrtt >>==  22..33..22,
       bbrraaiinnttrreeee >>== 22..00..00, and bbuuiillddeerr >>== 22..00..00.

       When   the   dependencies  are  first  resolved,  Bundler  will  select
       aaccttiivveessuuppppoorrtt 22..33..88, which satisfies the requirements of both  gems  in
       your Gemfile(5).

       Next, you modify your Gemfile(5) to:

           source ´https://rubygems.org´

           gem ´actionpack´, ´3.0.0.rc´
           gem ´activemerchant´

       The  aaccttiioonnppaacckk  33..00..00..rrcc  gem  has  a  number of new dependencies, and
       updates the aaccttiivveessuuppppoorrtt dependency to == 33..00..00..rrcc and the rraacckk  depen‐
       dency to ~~>> 11..22..11.

       When  you  run  bbuunnddllee  iinnssttaallll,  Bundler  notices that you changed the
       aaccttiioonnppaacckk gem, but not the aaccttiivveemmeerrcchhaanntt gem. It evaluates  the  gems
       currently being used to satisfy its requirements:

       aaccttiivveessuuppppoorrtt 22..33..88
              also  used  to  satisfy a dependency in aaccttiivveemmeerrcchhaanntt, which is
              not being updated

       rraacckk ~~>> 11..11..00
              not currently being used to satisfy another dependency

       Because you did not explicitly ask to update aaccttiivveemmeerrcchhaanntt, you  would
       not  expect it to suddenly stop working after updating aaccttiioonnppaacckk. How‐
       ever, satisfying the new aaccttiivveessuuppppoorrtt 33..00..00..rrcc dependency  of  action‐
       pack requires updating one of its dependencies.

       Even  though aaccttiivveemmeerrcchhaanntt declares a very loose dependency that theo‐
       retically matches aaccttiivveessuuppppoorrtt 33..00..00..rrcc, Bundler treats gems  in  your
       Gemfile(5)  that have not changed as an atomic unit together with their
       dependencies. In this case, the aaccttiivveemmeerrcchhaanntt dependency is treated as
       aaccttiivveemmeerrcchhaanntt  11..77..11  ++  aaccttiivveessuuppppoorrtt  22..33..88,  so bbuunnddllee iinnssttaallll will
       report that it cannot update aaccttiioonnppaacckk.

       To explicitly update aaccttiioonnppaacckk, including its dependencies which other
       gems  in  the  Gemfile(5) still depend on, run bbuunnddllee uuppddaattee aaccttiioonnppaacckk
       (see bbuunnddllee uuppddaattee((11))).

       SSuummmmaarryy: In general, after making a change  to  the  Gemfile(5)  ,  you
       should  first  try  to run bbuunnddllee iinnssttaallll, which will guarantee that no
       other gem in the Gemfile(5) is impacted by the change. If that does not
       work, run [bundle update(1)][bundle-update].

SSEEEE AALLSSOO
       ·   Gem                           install                          docs
           _h_t_t_p_:_/_/_g_u_i_d_e_s_._r_u_b_y_g_e_m_s_._o_r_g_/_r_u_b_y_g_e_m_s_-_b_a_s_i_c_s_/_#_i_n_s_t_a_l_l_i_n_g_-_g_e_m_s

       ·   Rubygems signing docs _h_t_t_p_:_/_/_g_u_i_d_e_s_._r_u_b_y_g_e_m_s_._o_r_g_/_s_e_c_u_r_i_t_y_/

                                 October 2017                BUNDLE-INSTALL(1)
